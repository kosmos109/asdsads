using System;
using System.IO;
using Newtonsoft.Json;
using System.Xml.Serialization;

[Serializable]
public class Figure
{
    public string Name { get; set; }
    public int Width { get; set; }
    public int Height { get; set; }

    public Figure(string name, int width, int height)
    {
        Name = name;
        Width = width;
        Height = height;
    }

    public Figure()
    {
        // Пустой конструктор для сериализации/десериализации 
    }
}

public class FileReaderWriter
{
    public Figure[] LoadData(string filePath)
    {
        string extension = Path.GetExtension(filePath).ToLower();
        Figure[] figures = null;

        try
        {
            if (extension == ".txt")
            {
                figures = LoadFromTxt(filePath);
            }
            else if (extension == ".json")
            {
                figures = LoadFromJson(filePath);
            }
            else if (extension == ".xml")
            {
                figures = LoadFromXml(filePath);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }

        return figures;
    }

    private Figure[] LoadFromTxt(string filePath)
    {
        string[] lines = File.ReadAllLines(filePath);
        Figure[] figures = new Figure[lines.Length];
        for (int i = 0; i < lines.Length; i++)
        {
            string[] parts = lines[i].Split(',');
            string name = parts[0].Split(':')[1].Trim();
            int width = int.Parse(parts[1].Split(':')[1].Trim());
            int height = int.Parse(parts[2].Split(':')[1].Trim());
            figures[i] = new Figure(name, width, height);
        }
        return figures;
    }

    private Figure[] LoadFromJson(string filePath)
    {
        string json = File.ReadAllText(filePath);
        return JsonConvert.DeserializeObject<Figure[]>(json);
    }

    private Figure[] LoadFromXml(string filePath)
    {
        XmlSerializer serializer = new XmlSerializer(typeof(Figure[]));
        using (FileStream fileStream = new FileStream(filePath, FileMode.Open))
        {
            return (Figure[])serializer.Deserialize(fileStream);
        }
    }

    public void SaveData(string filePath, Figure[] figures)
    {
        string extension = Path.GetExtension(filePath).ToLower();

        try
        {
            if (extension == ".txt")
            {
                SaveToTxt(filePath, figures);
            }
            else if (extension == ".json")
            {
                SaveToJson(filePath, figures);
            }
            else if (extension == ".xml")
            {
                SaveToXml(filePath, figures);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка: {ex.Message}");
        }
    }

    private void SaveToTxt(string filePath, Figure[] figures)
    {
        using (StreamWriter writer = new StreamWriter(filePath))
        {
            foreach (var figure in figures)
            {
                writer.WriteLine($"Name: {figure.Name}, Width: {figure.Width}, Height: {figure.Height}");
            }
        }
    }

    private void SaveToJson(string filePath, Figure[] figures)
    {
        string json = JsonConvert.SerializeObject(figures);
        File.WriteAllText(filePath, json);
    }

    private void SaveToXml(string filePath, Figure[] figures)
    {
        XmlSerializer serializer = new XmlSerializer(typeof(Figure[]));
        using (FileStream fileStream = new FileStream(filePath, FileMode.Create))
        {
            serializer.Serialize(fileStream, figures);
        }
    }
}

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Добро пожаловать в текстовый конвертер:"); 
        Console.WriteLine("Перед тем как вы начнете вставлять свой путь до файла, учтите, что код очень хрупкий");
        Console.WriteLine("Чтобы путь нашелся нужно без пробелов его вставить (в начале пробелы обычно)");
        Console.WriteLine("Ну и вставьте свой путь до файла");
        string filePath = Console.ReadLine();
        if (File.Exists(filePath))
        {
            FileReaderWriter fileReaderWriter = new FileReaderWriter();
            Figure[] figures = fileReaderWriter.LoadData(filePath);
            while (true)
            {
                Console.Clear(); 
                Console.WriteLine("Данные:");
                foreach (var figure in figures)
                {
                    Console.WriteLine($"Name: {figure.Name}, Width: {figure.Width}, Height: {figure.Height}");
                }
                Console.WriteLine("Menu:");
                Console.WriteLine("1. Добавить данные"); 
                Console.WriteLine("2. Изменить данные");
                Console.WriteLine("3. Удалить данные");
                Console.WriteLine("4. Сохранить данные");
                ConsoleKeyInfo key = Console.ReadKey();
                if (key.Key == ConsoleKey.D1 || key.Key == ConsoleKey.NumPad1)
                {
                    Console.WriteLine("\nВведите фигуру:"); string name = Console.ReadLine();
                    Console.WriteLine("Введите длину:"); int width = int.Parse(Console.ReadLine());
                    Console.WriteLine("Введите высоту:"); int height = int.Parse(Console.ReadLine());
                    Figure newFigure = new Figure(name, width, height);
                    Array.Resize(ref figures, figures.Length + 1); figures[figures.Length - 1] = newFigure;
                }
                else if (key.Key == ConsoleKey.D2 || key.Key == ConsoleKey.NumPad2)
                {
                    Console.WriteLine("\nВведите номер столбца для редактирования");
                    int index = int.Parse(Console.ReadLine());
                    if (index >= 0 && index < figures.Length)
                    {
                        Console.WriteLine("\nВведите фигуру:"); string newName = Console.ReadLine();
                        Console.WriteLine("Введите длину:"); int newWidth = int.Parse(Console.ReadLine());
                        Console.WriteLine("Введите высоту:"); int newHeight = int.Parse(Console.ReadLine());
                        figures[index].Name = newName;
                        figures[index].Width = newWidth; figures[index].Height = newHeight;
                    }
                    else
                    {
                        Console.WriteLine("Неправильный ввод");
                    }
                }
                else if (key.Key == ConsoleKey.D3 || key.Key == ConsoleKey.NumPad3)
                {
                    Console.WriteLine("\nВведите номер столбца для удаления:"); int index = int.Parse(Console.ReadLine());
                    if (index >= 0 && index < figures.Length)
                    {
                        figures = figures.Where((source, idx) => idx != index).ToArray();
                    }
                    else
                    {
                        Console.WriteLine("Неправильный ввод.");
                    }
                }
                else if (key.Key == ConsoleKey.D4 || key.Key == ConsoleKey.NumPad4)
                {
                    Console.WriteLine("Сохранить в формате:"); 
                    Console.WriteLine("1. TXT");
                    Console.WriteLine("2. JSON"); 
                    Console.WriteLine("3. XML");
                    ConsoleKeyInfo formatKey = Console.ReadKey();
                    string saveFilePath = filePath; if (formatKey.Key == ConsoleKey.D1 || formatKey.Key == ConsoleKey.NumPad1)
                    {
                        saveFilePath = Path.ChangeExtension(saveFilePath, ".txt");
                    }
                    else if (formatKey.Key == ConsoleKey.D2 || formatKey.Key == ConsoleKey.NumPad2)
                    {
                        saveFilePath = Path.ChangeExtension(saveFilePath,".json");
                    }
                    else if (formatKey.Key == ConsoleKey.D3 || formatKey.Key == ConsoleKey.NumPad3)
                    {
                        saveFilePath = Path.ChangeExtension(saveFilePath, ".xml");
                    }
                    else
                    {
                        Console.WriteLine("\nНеправильный ввод.");
                        continue;
                    }
                    fileReaderWriter.SaveData(saveFilePath, figures);
                    Console.WriteLine($"\nФайл сохранился в {saveFilePath}"); 
                    break;
                }
            }
        }
        else
        {
            Console.WriteLine("Файл не найден.");
        }
    }
}
